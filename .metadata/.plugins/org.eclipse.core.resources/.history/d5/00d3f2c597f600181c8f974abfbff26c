package com.latam.certification.tasks;

import com.latam.certification.models.BabyPassenger;
import com.latam.certification.models.ChildPassenger;
import com.latam.certification.userinterfaces.SelectFlightComponent;

import net.serenitybdd.core.steps.Instrumented;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Task;
import net.serenitybdd.screenplay.actions.Click;
import net.serenitybdd.screenplay.actions.Enter;
import net.serenitybdd.screenplay.actions.SelectFromOptions;
import net.serenitybdd.screenplay.conditions.Check;

public class EnterDataBabyPassenger implements Task {
	
	private BabyPassenger babyData;

	public EnterDataBabyPassenger(BabyPassenger babyData) {
		this.babyData= babyData;
	}
	@Override
	public <T extends Actor> void performAs(T actor) {
		
		actor.attemptsTo(
				Enter.theValue(this.childtData.getChildName()).into(SelectFlightComponent.CHILD_NAME),
				Enter.theValue(this.childtData.getChildLastname()).into(SelectFlightComponent.BABY_LASTNAME),
				Check.whether(this.childtData.getChildIdType().equals("Pasaporte")).
		                andIfSo(Click.on(SelectFlightComponent.ADULT_ID_TYPE_PASSPORT)).otherwise(),
		        Check.whether(this.childtData.getChildIdType().equals("Cedula")).
		                andIfSo(Click.on(SelectFlightComponent.ADULT_ID_TYPE_PASSPORT)).otherwise(),
				Enter.theValue(this.childtData.getChildIdNumber()).into(SelectFlightComponent.CHILD_ID_NUMBER),
				SelectFromOptions.byVisibleText(this.childtData.getChildOrigineCountry()).from(SelectFlightComponent.CHILD_ORIGIN_COUNTRY),
				Enter.theValue(this.childtData.getChildBirthDateDay()).into(SelectFlightComponent.CHILD_BIRTH_DATE_DAY),
				SelectFromOptions.byVisibleText(this.childtData.getChildBirthDateMonth()).from(SelectFlightComponent.CHILD_BIRTH_DATE_MONTH),
				Enter.theValue(this.childtData.getChildBirthDateYear()).into(SelectFlightComponent.CHILD_BIRTH_DATE_YEAR)

				);
		
	}
	public static EnterDataBabyPassenger of(BabyPassenger babyData) {
		return Instrumented.instanceOf(EnterDataBabyPassenger.class)
			.withProperties(babyData);
				
	}
}
