package co.com.google.runners.pages;

//Importar librerías

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;//Librería para manipular los elementos de la página web.
import org.openqa.selenium.chrome.ChromeDriver;//Librerias para la manipulación del navegador.
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;

import java.util.concurrent.TimeUnit;
//-------------Aquí termina la importación de librerías

public class BuscarEnGooglePOM {
	
	
	//Variable Globales.
	WebDriver carla;
	String nameDriverNavegator,driverLocation,browser;
	
	//La clase WebElement Representa un elemento HTML.
	WebElement element;
	
	//Constructor 
	public BuscarEnGooglePOM(String nameDriverNavegator, String driverLocation) {
		
		//Recibe como parametros el nombre del driver y la localización del jar.
		System.setProperty(nameDriverNavegator,driverLocation);
		
		/*Asignar a las variables globales, los parametros recibidos.
		El this sirve para hacer referencia a un metodo o propiedad del objeto 
		actual.*/

		this.nameDriverNavegator=nameDriverNavegator;
		this.driverLocation=driverLocation;
				
	}
	
	//Método para abrir el navegador
	public void openBrowser(String navegador) {
		
		//Instanciar el robot, de acuerdo al navegador usado.
		//El robot se llama Carla.
		
		switch(navegador) {
			case "chrome":
				carla = new ChromeDriver(); 
				break;
			case "firefox":
				carla = new FirefoxDriver();
				break;
			case "explorer":
				carla = new InternetExplorerDriver();
				break;
		}
				
		//Maximiza la ventana del navegador
		//carla.manage().window().maximize();
		
		/*Implicit Wait le dirá al WebDriver que espere cierta cantidad de 
		tiempo antes de que lance una excepción de “No Such Element Exception”. 
		La configuración predeterminada es 0. Una vez que configuremos el tiempo,
		el WebDriver esperará ese tiempo antes de lanzar una excepción.*/
		carla.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		
	}
	
	//Metodo para abrir una pagina web, dependiendo de la url
	public void openUrl(String url) {
		carla.get(url);
	}
	
	//Método para buscar elementos de la pagina segun el método de búsqueda recibido como parametro.
	public WebElement searchElement(String element, String typeSearch) {
		
		try {
			switch(typeSearch) {
			
				case "id":
					this.element=carla.findElement(By.id(element));
					break;
				case "name":
					this.element=carla.findElement(By.name(element));
					break;
				case "xpath":
					this.element=carla.findElement(By.xpath(element));
					break;
				case "linktext":
					this.element=carla.findElement(By.linkText(element));
					break;
				case "css":
					this.element=carla.findElement(By.cssSelector(element));
					break;
			}
		}catch(NoSuchElementException e) {
			
			System.out.println("No se encontro el elemento");
			this.element=null;
		}
		return this.element;
	}

	/*Método sendKeys es un método para pasar el contenido o texto a un elemento editable sin reemplazar 
	el contenido disponible anterior.*/
	
	public void writeText(String text) {
		element.sendKeys(text);
	}
	
	//El método click() se utiliza para simular el clic de cualquier elemento
	public void clic(WebElement element) {
		element.click();
	}
	
	public String getTitlePage(){
		return carla.getTitle();
	}
	
	public String getTextElement(){
		return element.getAttribute("value");
	}
	
	public void closeTest() {
		carla.close();
		
	}
		
}
